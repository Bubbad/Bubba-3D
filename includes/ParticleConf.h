#ifndef BUBBA_3D_PARTICLECONF_H
#define BUBBA_3D_PARTICLECONF_H

#include <GL/glew.h>
#include "linmath/float3.h"
#include "linmath/Quaternion.h"

using namespace chag;
class ParticleConf {

/**
 * \brief Configuration for how Particles generated by a ParticleGenerator behaves.
 */
public:
    ParticleConf() { }
    virtual ~ParticleConf() { }

    /**
     * The initial position of a Particle.
     * Is called on particle reset.
     * @param genPos The position of the ParticleGenerator spawning the Particle.
     */
    virtual float3 initialPosition() = 0;

    /**
     * The initial velocity for the Particle.
     * Is called on particle reset.
     */
    virtual float3 initialVelocity() = 0;

    /**
     * Accelerates the Particle given it's current velocity.
     * Is called each particle update.
     * @param velocity The current velocity of the Particle.
     */
    virtual float3 accelerate(float3 velocity) = 0;

    /**
     * Calculates the Lifetime for the Particle.
     * Is called on particle reset.
     */
    virtual float calcLifetime() = 0;


    /**
     * Calculates the scale of a particle.
     * Called for each particle the ParticleGenerator spawns
     * each time ParticleGenerator render is called.
     */
    virtual float3 calcParticleScale() = 0;

    /**
     * Continue to loop the ParticleGenerator.
     * If false no new particle will be spawned when a Particle dies.
     * @param The time since in seconds since last update call.
     */
    virtual bool loop(float dt) = 0;

    GLuint blendFunc = GL_ONE;

    void setLooping(bool value){
        looping = value;
    }


protected:
    bool looping = true;

};



#endif //BUBBA_3D_PARTICLECONF_H
