/*
 * This file is part of Bubba-3D.
 *
 * Bubba-3D is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Bubba-3D is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Bubba-3D. If not, see http://www.gnu.org/licenses/.
 */
#pragma once

#include <GL/glew.h>
#include "linmath/float3.h"
#include "linmath/Quaternion.h"

class ParticleConf {

/**
 * \brief Configuration for how Particles generated by a ParticleGenerator behaves.
 */
public:
    ParticleConf() = default;
    virtual ~ParticleConf() = default;

    /**
     * The initial position of a Particle.
     * Is called on particle reset.
     * @param genPos The position of the ParticleGenerator spawning the Particle.
     */
    virtual chag::float3 initialPosition() = 0;

    /**
     * The initial velocity for the Particle.
     * Is called on particle reset.
     */
    virtual chag::float3 initialVelocity() = 0;

    /**
     * Accelerates the Particle given it's current velocity.
     * Is called each particle update.
     * @param velocity The current velocity of the Particle.
     */
    virtual chag::float3 accelerate(chag::float3 velocity) = 0;

    /**
     * Calculates the Lifetime for the Particle.
     * Is called on particle reset.
     */
    virtual float calcLifetime() = 0;


    /**
     * Calculates the scale of a particle.
     * Called for each particle the ParticleGenerator spawns
     * each time ParticleGenerator render is called.
     */
    virtual chag::float3 calcParticleScale() = 0;

    /**
     * Continue to loop the ParticleGenerator.
     * If false no new particle will be spawned when a Particle dies.
     * @param The time since in seconds since last update call.
     */
    virtual bool loop(float dt) = 0;

    GLuint blendFunc = GL_ONE;

    void setLooping(bool value){
        looping = value;
    }

protected:
    bool looping = true;

};
