#pragma once

#include "linmath/float3.h"
#include "linmath/Quaternion.h"

#define PARTICLE_SPEED ((rand() % 6000) - 3000.0f) / 5000.0f
#define PARTICLE_LIFE 1000.0f + (rand() % 1000)

class ParticleConf;

/**
 * \breif Represents a particle generated by a ParticleGenerator.
 *
 */
class Particle {

public:
    Particle(ParticleConf *conf, chag::float4x4 modelMatrix);

    /**
     * Resets the particle according to the given ParticleConf.
     * This is used in order to reuse particles.
     * @param conf The ParticleConf to used by the ParticleGenerator.
     */
    void reset(ParticleConf *conf, chag::float4x4 modelMatrix);

    /**
     * @return If the Particle is alive, that is visible, or not.
     *         Dead Particles will can be reused by calling reset().
     */
    bool isAlive();

    /**
     * @param deltaTime Time since last update in seconds.
     * @param distanceToCam The distance from camera in units.
     * @param conf The ParticleConf used by the ParticleGenerator.
     */
    void update(float deltaTime, float distanceToCam, ParticleConf *conf);
    chag::float3 getPosition();

private:
    float life; //in ms
    chag::float3 position;
    chag::float3 velocity;
};
